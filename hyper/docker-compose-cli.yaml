# Docker compose crea una red virtual en la que los dominios establecidos son validos
# El nombre de la red es el especificado, que debe coincidir en todos los elementos
# orderer.example.com se convierte en una direccion v√°lida en esa red virtual

version: '2'
volumes:
  orderer.example.com:
  peer0.org1.example.com:
  peer1.org1.example.com:
  peer0.org2.example.com:
  peer1.org2.example.com:

networks:
  byfn: # Todos en la misma red para poder comunicarse

services: # Diferentes contenedores que se van a iniciar
  orderer.example.com:
    container_name: orderer.example.com # Arranca un contenedor con este nombre
    extends:
      file: base/docker-compose-base.yaml # Extiende la configuracion base y sobreescribe algunas configuraciones
      service: orderer.example.com # Sobreescribe el nombre del contenedor
    networks:
      - byfn

  peer0.org1.example.com:
    container_name: peer0.org1.example.com
    extends:
      file: base/docker-compose-base.yaml
      service: peer0.org1.example.com
    networks:
      - byfn

  peer1.org1.example.com:
    container_name: peer1.org1.example.com
    extends:
      file: base/docker-compose-base.yaml
      service: peer1.org1.example.com
    networks:
      - byfn

  peer0.org2.example.com:
    container_name: peer0.org2.example.com
    extends:
      file: base/docker-compose-base.yaml
      service: peer0.org2.example.com
    networks:
      - byfn

  peer1.org2.example.com:
    container_name: peer1.org2.example.com
    extends:
      file: base/docker-compose-base.yaml
      service: peer1.org2.example.com
    networks:
      - byfn

  cli:
    container_name: cli
    # image: hyperledger/fabric-tools:$IMAGE_TAG
    image: hyperledger/fabric-tools
    tty: true
    stdin_open: true
    environment:
      - SYS_CHANNEL=$SYS_CHANNEL
      - GOPATH=/opt/gopath
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      #- FABRIC LOGGING SPEC-DEIUG
      - FABRIC_LOGGING_SPEC=INFO
      - CORE_PEER_ID=cli
      - CORE_PEER_ADDRESS=peer0.org1.example.com:7051
      - CORE_PEER_LOCALMSPID=0rg1MSP
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/go/src/github.com/hyperledger/fabric/peer/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com
      - CORE_PEER_TLS_KEY_FILE=/go/src/github.com/hyperledger/fabric/peer/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com
      - CORE_PEER_TLS_ROOTCERT_FILE=/go/src/github.com/hyperledger/fabric/peer/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com
      - CORE_PEER MSPCONFIGPATH=/go/src/github.com/hyperledger/fabric/peer/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com
    working_dir: /go/src/github.com/hyperledger/fabric/peer
    command: /bin/bash
    volumes:
      - /var/run/:/host/var/run/
      - ./../chaincode/:/go/src/github.com/hyperledger/fabric/peer/chaincode
      - ./crypto-config:/go/src/github.com/hyperledger/fabric/peer/hyperledger/fabric/peer/crypto/
      - ./scripts:/go/src/github.com/hyperledger/fabric/peer/hyperledger/fabric/peer/scripts/
      - ./channel-artifacts:/go/src/github.com/hyperledger/fabric/peer/hyperledger/fabric/peer/channel-artifacts
    depends_on:
      - orderer.example.com
      - peer0.org1.example.com
      - peer1.org1.example.com
      - peer0.org2.example.com
      - peer1.org2.example.com
    networks:
      - byfn
