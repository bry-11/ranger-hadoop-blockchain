# -----------------------------------------------
# Section: Organizations
#
# - This section defines the different organizational identities which will
# be referenced later in the configuration,
#
# -----------------------------------------------
Organizations:
  # SampleOrg defines an MSP using the sampleconfig. It should never be used
  # in production but may be used as a template for other definitions
  - &OrdererOrg
    # Defaultorg defines the organization which is used in the sampleconfig
    # of the fabric git development environment
    Name: OrdererOrg # Nombre de la organizacion
    # ID to load the MSP definition as
    ID: OrdererMSP # Nombre de los certificados, pueden ser x.509, autenticacion hardware, etc
    # EL ID es el nombre que se le da a los certificados
    # Alias para los certificados del directorio /msp

    # MSPDir is the filesystem path which contains the MSP configuration
    # Directorio al que se le asocia el ID y donde está el material criptografico
    # generado en 'crypto-config'
    MSPDir: crypto-config/ordererOrganizations/example.com/msp

    # Policies defines the set of policies at this level of the config tree
    # For organization policies, their canonical path is usualLy
    # /Channel/<Application|Orderer>/<OrgName>/<PolicyName>
    Policies:
      Readers:
        Type: Signature
        Rule: "OR('OrdererMSP.member')"
      Writers:
        Type: Signature
        Rule: "OR('OrdererMSP.member')"
      Admins:
        Type: Signature
        Rule: "OR('OrdererMSP.admin')"

  - &Org1
    # DefaultOrg defines the organization which is used in the sampleconfig
    # of the fabric,git development environment
    Name: Org1MSP
    # ID to load the MSP definition as
    ID: Org1MSP
    MSPDir: crypto-config/peerOrganizations/org1.example.com/msp
    # Policies defines the set of policies at this level of the config tree
    # For organization policies, their canonical path is usually
    # /Channel/<Application|Orderer>/<OrgName>/<PolicyName>
    Policies:
      Readers:
        Type: Signature
        Rule: "OR('Org1MSP.admin', 'Org1MSP.peer', 'Org1MSP.client')"
      Writers:
        Type: Signature
        Rule: "OR('Org1MSP.admin', 'Org1MSP.client')"
      Admins:
        Type: Signature
        Rule: "OR('Org1MSP.admin')"
    # Leave this flag set to true.
    AnchorPeers:
      # Los AnchorPeers se utilizan para comunicarse entre organizaciones, pueden hablar entre
      # ellos estando en una organización distinta cada uno

      # Se define uno o varios AnchorPeers en cada organización
      # Si solo hay una no. es necesario

      # AnchorPeers defines the location of peers which can be used
      # for cross org gossip communication. Note, this value is only
      # encoded in the genesis block in the Application section context
      - Host: peer0.org1.example.com
        Port: 7051

  - &Org2
    # DefaultOrg defines the organization which is used in the sampleconfig
    # of the fabric.git development environment
    Name: Org2MSP
    # ID to load the MSP definition as
    ID: Org2MSP
    MSPDir: crypto-config/peerOrganizations/org2.example.com/msp
    # Policies defines the set of policies at this level of the config tree.
    # For organization policies, their canonical path is usually
    # /Channel/<Application|Orderer>/<OrgName>/<PolicyName>
    Policies:
      Readers:
        Type: Signature
        Rule: "OR('Org2MSP.admin', 'Org2MSP.peer', 'Org2MSP.client')"
      Writers:
        Type: Signature
        Rule: "OR('Org2MSP.admin', 'Org2MSP.client')"
      Admins:
        Type: Signature
        Rule: "OR('Org2MSP.admin')"
    # leave this flag set to true.
    AnchorPeers:
      # Los AnchorPeers se utilizan para comunicarse entre organizaciones, pueden hablar entre
      # ellos estando en una organización distinta cada uno

      # Se define uno o varios AnchorPeers en cada organización
      # Si solo hay una no es necesario

      # AnchorPeers defines the location of peers which can be used
      # for cross org gossip communication. Note, this value is only
      # encoded in the genesis block in the Application section context
      - Host: peer0.org2.example.com
        Port: 7051

# --------------------------------------------
# SECTION: Capabilities
#
#   - This section defines the capabilities of fabric network. This is a new concept as of v1.1.0 and should not be utilized in mixed networks with
#   v1.0.x peers and orderers. Capabilities define features which must be present in a fabric binary for that binary to safely participate in the
#   fabric network. For instance, if a new MSP type is added, newer binaries might recognize and validate the signatures from this type, while older
#   binaries without this support would be unable to validate those transactions. This could lead to different versions of the fabric binares
#   naving different world states. Instead, defining a capability for a channel informs those binaries without this capability that they must
#   cease processing transactions until they have been upgraded. For v1.0.x if any capabilities are defined (including a map with all capabilities turned off)
#   then the v1.0.x peer will deliberately crash.
# --------------------------------------------
Capabilities:
  # Channel capabilities apply to both the orderers and the peers and must be
  # supported by both.
  # Set the value of the capability to true to require it.
  Channel: &ChannelCapabilities
    # V1.4.3 for Channel is a catchall flag for behavior which has been
    # determined to be desired for all orderers and peers running at the v1.4.3
    # level, but which would be incompatible with orderers and peers from
    # prior releases.
    # Prior to enabling V1.4.3 channel capabilities, ensure that all
    # orderers and peers on a channel are at v1.4.3 or later.
    V1_4_3: true
    # V1.3 for Channel enables the new non-backwards compatible
    # features and fixes of fabric v1.3
    V1_3: false
    # V1.1 for Channel enables the new non-backwards compatible
    # features and fixes of fabric v1.1
    V1_1: false

  # Orderer capabilities apply only to the orderers, and may be safely
  # used with prior release peers.
  # Set the value of the capability to true to require it.
  Orderer: &OrdererCapabilities
    # V1.4.2 for Orderer is a catchall flag for behavior which has been
    # determined to be desired for all orderers running at the v1.4.2
    # level, but which would be incompatible with orderers from prior releases.
    # Prior to enabling V1.4.2 orderer capabilities, ensure that all
    # orderers on a channel are at v1.4.2 or later.
    V1_4_2: true
    # V1.1 for Orderer enables the new non-backwards compatible
    # features and fixes of fabric v1.1
    V1_1: false

  # Application capabilities apply only to the peer network, and may be safely
  # used with prior release orderers.
  # Set the value of the capability to true to require it.
  Application: &ApplicationCapabilities
    # V1.4.2 fo- Application enables the new non-backwards compatible
    # features and fixes of fabric v1.4.2.
    V1_4_2: true
    # V1.3 for Application enables the new non-backwards compatible
    # features and fixes of fabric vi.3.
    V1_3: false
    # V1.2 for Application enables the new non-backwards compatible
    # features and fixes of fabric v1.2 (note, this need not be set if
    # later version capabilities are set)
    V1_2: false
    # V1.1 for Application enables the new non-backwards compatible
    # features and fixes of fabric v1.1 (note, this need not be set
    # later version capabilities are set).
    V1_1: false

# ---------------------------------------------
# SECTION: Application
#   - This section defines the values to encode into a config transaction or genesis block for application related parameters
# ---------------------------------------------
Application: &ApplicationDefaults
  # Organizations is the list of orgs which are defined as participants on
  # the application side if the network.
  Organizations:
  # Policies defines the set of policies at this level of the config tree
  # For Application policies, their canonical path is
  # /Channel/Application/<PolicyName>
  Policies:
    Readers:
      Type: ImplicitMeta
      Rule: 'ANY Readers'
    Writers:
      Type: ImplicitMeta
      Rule: 'ANY Writers'
    Admins:
      Type: ImplicitMeta
      Rule: 'MAJORITY Admins'
  Capabilities:
    <<: *ApplicationCapabilities

# ---------------------------------------------------
# SECTION: Orderer
#
#   - This section defines the values to encode into a config transaction or genesis block for orderer related parameters
# ---------------------------------------------------
Orderer: &OrdererDefaults
  # Orderer Type: The orderer implementation to start
  # Available types are "solo". "kafka" and "etcdraft"
  OrdererType: solo
  Addresses:
    - orderer.example.com:7050
  # Batch Timeout: The amount of time to wait before creating a batch
  BatchTimeout: 2s # Tiempo que especifica que cada 2s se va a crear un nuevo bloque
  # Batch Size: Controls the number of messages batched into a block
  BatchSize:
    # Max Message Count: The maximum number of messages to permit in a batch
    MaxMessageCount: 10 # Numero de mensajes que al ser alcanzado, se crea un nuevo bloque
    # Modificar BatchTimeout o MaxMessageCount para optimizar el sistema, ej s1 es un
    # sistema con muchas peticiones, aumentar el contador para no estar todo el rato
    # escribiendo bloques

    # Cambiar el BatchTimeout reduciendolo si tienes muchos nodos y poco numero de transacciones
    # para que tarden menos en propagarse y cerrar el bloque

    # Absolute Max Bytes: The absolute maximum number of bytes allowed for
    # the serialized messages in a batch:
    AbsoluteMaxBytes: 99 MB
    # Preferred Max Bytes: The preferred maximum number of bytes allowed for
    # the serialized messages in a batch. A message larger than the preferred
    # max bytes will result in a batch larger than preferred max bytes.
    PreferredMaxBytes: 512 KB

  Kafka:
    # Brokers: A list of Kafka brokers to which the orderer connects
    # NOTE: Use IP:port notation
    Brokers:
      - 127.0.0.1:9092
  # EtcdRaft defines configuration which must be set when the "etcdraft"
  # orderertype is chosen.
  EtcdRaft:
    # The set of Raft replicas for this network. For the etcd/raft-based
    # implementation, we expect every replica to also be an OSN. Therefore,
    # a subset of the host:port items enumerated in this list should be
    # replicated under the Orderer, Addresses key above.
    Consenters:
      - Host: orderer.example.com
        Port: 7050
        ClientTLSCert: crypto-config/ordererOrganizations/example.com/orderers/orderer.example.com/ls/server.crt
        ServerTLSCert: crypto-config/ordererOrganizations/example.com/orderers/orderer.example.com/tls/server.crt
      - Host: orderer2.example.com
        Port: 7050
        ClientTLSCert: crypto-config/ordererOrganizations/example.com/orderers/orderer2.example.com/tls/server.crt
        ServerTLSCert: crypto-config/ordererOrganizations/example.com/orderers/orderer2.example.com/tls/server.crt
      - Host: orderer3.example.com
        Port: 7050
        ClientTLSCert: crypto-config/ordererOrganizations/example.com/orderers/orderer3.example.com/tls/server.crt
        ServerTLSCert: crypto-config/ordererOrganizations/example.com/orderers/orderer3.example.com/tls/server.crt
      - Host: orderer4.example.com
        Port: 7050
        ClientTLSCert: crypto-config/ordererOrganizations/example.com/orderers/orderer4.example.com/tls/server.crt
        ServerTLSCert: crypto-config/ordererOrganizations/example.com/orderers/orderer4.example.com/tls/server.crt
      - Host: orderer5.example.com
        Port: 7050
        ClientTLSCert: crypto-config/ordererOrganizations/example.com/orderers/orderer5.example.com/tls/server.crt
        ServerTLSCert: crypto-config/ordererOrganizations/example.com/orderers/orderer5.example.com/tls/server.crt

  # Organizations is the list of orgs which are defined as participants on
  # the orderer side of the network
  Organizations:
  # Policies defines the set of policies at this level of the config tree
  # For Orderer policies, their canonical path is
  # Channel/Orderer/<PolicyName>
  Policies:
    Readers:
      Type: ImplicitMeta
      Rule: 'ANY Readers'
    Writers:
      Type: ImplicitMeta
      Rule: 'ANY Writers'
    Admins:
      Type: ImplicitMeta
      Rule: 'MAJORITY Admins'
    # BlockValidation specifies what signatures must be included in the block
    # from the orderer for the peer to validate it.
    BlockValidation:
      Type: ImplicitMeta
      Rule: 'ANY Writers'

# -------------------------------------
# CHANNEL
#
#   This section defines the values to encode into a config transaction or genesis block for channel related parameters.
# -------------------------------------
Channel: &ChannelDefaults
  # Policies defines the set of policies at this level of the config tree
  # For Channel policies, their canonical path is
  # /Channel/<PolicyName>
  Policies:
    # Who may invoke the 'Deliver' API
    Readers:
      Type: ImplicitMeta
      Rule: 'ANY Readers'
    # Who may invoke the. "Broadcast' API
    Writers:
      Type: ImplicitMeta
      Rule: 'ANY Writers'
    # By default, who may modify elements at this config level
    Admins:
      Type: ImplicitMeta
      Rule: 'MAJORITY Admins'

  # Capabilities describes the channel level capabilities, see the
  # dedicated Capabilities section elsewhere in this file for a full
  # description
  Capabilities:
    <<: *ChannelCapabilities

# -------------------------------
# Profile
# - Different configuration profiles may be encoded here to be specified as parameters to the configtxgen tool
# -------------------------------
Profiles:
  # El nombIa del Profile es un alias para que al ejecutar •/configtxgen se cree la configuracion
  # del genesis.block o del canal
  # «<: Copiar todo el contenido y ponerlo aqui
  TwoOrgsOrdererGenesis:
    <<: *ChannelDefaults # Alias especificado en el apartado de Channel (&)
    Orderer:
      <<: *OrdererDefaults # Alias especificado en el apartado de Orderer (&)
      Organizations:
        - *OrdererOrg # Organizacion del Orderer
      Capabilities:
        <<: *OrdererCapabilities
    Consortiums: # Especifica las organizaciones a las que sirve el Orderer
      SampleConsortium:
        Organizations: # En este genesis block se incluyen las claves publicas de
          - *Org1 # La organizacion Org1
          - *Org2

  TwoOrgsChannel: # Para crear otro channel, duplicar esta configuracion cambiando el
    # nombre del Profile (TwoOrgsChannel) por otro
    Consortium: SampleConsortium
    <<: *ChannelDefaults
    Application:
      <<: *ApplicationDefaults
      Organizations: # Claves publicas de las organizaciones capaces de operar en el channel
        - *Org1
        - *Org2
      Capabilities:
        <<: *ApplicationCapabilities
